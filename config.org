* Evil mode and related plugins
  #+BEGIN_SRC emacs-lisp
    ;; Evil and plugins
    (use-package evil  ;; emulate vim text editing
      :ensure t ;; install the evil package if not installed
      :init ;; tweak evil's configuration before loading it
      (setq evil-want-C-u-scroll t)
      :config ;; tweak evil after loading it
      (evil-mode 1)
      ;; example how to map a command in normal mode (called 'normal state' in evil)
      (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))

    (use-package evil-surround  ;; create/delete/change brakets/parenthesis/tags
      :ensure t
      :config
      (global-evil-surround-mode 1))

    (use-package evil-commentary  ;; comment chunks or lines of text (gc, gcc)
      :ensure t
      :init
      (evil-commentary-mode))

    (use-package nlinum-relative  ;; set hybrid line numbering
      :ensure t
      :config
      ;; something else you want
      (nlinum-relative-setup-evil)
      (add-hook 'prog-mode-hook 'nlinum-relative-mode))
  #+END_SRC

* IDO
** Enable IDO mode
   Shows you the possible buffers doing C-x b. Before, you had to do C-x C-b to show all the buffers in a new window.
   A bottom bar shows you the possible buffers, and as you type the name, the list gets filtered. On top of it, it also has tab compleation.
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** ido-vertical
   Shows the possible buffers in a single column, which makes it easier to see the possible selection.
   I've also selected the option to cycle through the elements using the C-n and C-p keys (down and up).
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+END_SRC
** smex
   Like IDO but for M-x commands
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex)) 
   #+END_SRC
* yasnippet
  Put your own snippets in the snippets directory inside ~/.emacs.d/
  To see the available snippets for your current mode: *M-x yas-describe-tables*.
  To create a new snippet, you type: *M-x yas-new-snippet*.
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (yas-global-mode 1)
     (yas-load-directory "~/.emacs.d/snippets"))
 #+END_SRC
* which-key
  Shows hints as you go typing some commands.
  e.g.
  You type C-x, and then it shows you in the bottom the next keys you could press next, and what they are for.
  
  #+BEGIN_SRC emacs-lisp
    ;; Which-key (shows possible key combinations after pressing some chord)
    (use-package which-key
      :ensure t
      :init
      (which-key-mode))
  #+END_SRC

* Appearance
** beacon
   Draws attention on the cursor with a light spike
   #+BEGIN_SRC emacs-lisp
     (use-package beacon  ;; Lights the cursor position changes
       :ensure t
       :init
       (beacon-mode 1))
   #+END_SRC

** Hides top bars with typical program options
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC

** Better looking bullets for org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+END_SRC

** Emacs color themes
   #+BEGIN_SRC emacs-lisp
     ;; Themes
     (use-package nimbus-theme
       :ensure t
       :defer t)
     (use-package spacemacs-theme
       :ensure t
       :defer t)
     (use-package oceanic-theme
       :ensure t
       :defer t)
   #+END_SRC
** Modeline
*** spaceline
    #+BEGIN_SRC emacs-lisp
      (use-package spaceline
        :ensure t
        :config
        (require 'spaceline-config)
        (spaceline-spacemacs-theme))
    #+END_SRC
* Other settings
** Electric pair mode
   Autocompletes pair of parenthesis or brackets
  #+BEGIN_SRC emacs-lisp
    (electric-pair-mode 1)
  #+END_SRC
  
* Completion
** company
   Shows the completion list a backend provides to him.
   Mapped the cycling through the elements to C-n and C-p.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-idle-delay 0)
       (setq company-minimun-prefix-length 3))

     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
   #+END_SRC

   To use company-mode in all buffers, add the following line to your init file:
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode) 
   #+END_SRC

** elpy Python completion
   *WARNING*: 
   *For emacs to find the PATH to anaconda python version, you have to launch emacs from the terminal.*
   https://stackoverflow.com/questions/49741513/emacs-python-interpreter-is-not-set-correctly
   
   Usage:
   - C-c C-c inside a python file runs all of it in the interpreter.
   - With a selection C-c C-c only runs that code in the interpreter.
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable)) 

     ;; Use the ipython as the interactive interpreter
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "-i --simple-prompt")
   #+END_SRC
** C, C++ completion.
*** company-irony
    Company completion backend for C, C++.
    Requires:
	- clang
	- libclang
	- cmake   
    #+BEGIN_SRC emacs-lisp
      (use-package company-irony
        :ensure t
        :config
        (require 'company)
        (add-to-list 'company-backends 'company-irony)) 
    #+END_SRC
*** irony
    On the first run, irony-mode will ask you to build and install irony-server. 
    To do so, type *M-x irony-install-server RET*.
    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :ensure t
        :config
	(add-hook 'c++-mode-hook 'irony-mode)
        (add-hook 'c-mode-hook 'irony-mode)
        (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)) 
    #+END_SRC


    
    
    
    
